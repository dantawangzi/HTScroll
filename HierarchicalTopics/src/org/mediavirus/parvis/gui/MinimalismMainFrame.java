/*
 */
package org.mediavirus.parvis.gui;

import com.mongodb.BasicDBList;
import com.mysql.jdbc.Connection;
import eventsView.EventViewFrame;
import java.awt.Dimension;
import java.awt.Toolkit;
import javax.swing.*;
import java.io.*;
import java.net.*;
import java.sql.DatabaseMetaData;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;

import java.util.Map;
import org.apache.commons.io.IOUtils;
import org.mediavirus.parvis.file.*;
import org.mediavirus.parvis.gui.temporalView.renderer.TemporalViewFrame;
import org.mediavirus.parvis.gui.topicRenderer.TopicGraphViewFrame;
import org.mediavirus.parvis.gui.topicRenderer.WorldMapProcessingFrame;
import org.mediavirus.parvis.gui.topicRenderer.VastGeoFrame;
import prefuse.data.Graph;

import prefuse.data.io.AbstractGraphWriter;
import prefuse.data.io.GraphWriter;
import prefuse.data.io.TreeMLWriter;
import prefuse.data.io.*;

import com.mongodb.MongoClient;
import com.mongodb.MongoException;
import com.mongodb.WriteConcern;
import com.mongodb.DB;
import com.mongodb.DBCollection;
import com.mongodb.BasicDBObject;
import com.mongodb.DBObject;
import com.mongodb.DBCursor;
import com.mongodb.ServerAddress;
import java.awt.geom.Point2D;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @authors Derek Xiaoyu Wang, Wenwen Dou, Li Yu
 */
public class MinimalismMainFrame extends javax.swing.JFrame {

    //private ViewController viewcontroller;
    //Defined by wdou
    private org.mediavirus.parvis.gui.ViewController viewController;

    DocumentViewer documentViewer = null;
    TemporalViewFrame temporalFrame = null;
    TopicGraphViewFrame topicFrame = null;
    VastGeoFrame vcGeoFrame = null;
    EventViewFrame eventViewFrame = null;

    public MinimalismMainFrame() {
        initComponents();
        viewController = new ViewController();

        //// TODO: DXW---Need to comment this out!April 03, 2013
        Topics topicDisplay = new Topics(viewController);

        viewController.addTopicDisplay(topicDisplay);

        documentViewer = new DocumentViewer(viewController);
        documentViewer.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        viewController.addDocumentViewer(documentViewer);

        // Get the default toolkit
        Toolkit toolkit = Toolkit.getDefaultToolkit();

        // Get the current screen size
        Dimension scrnsize = toolkit.getScreenSize();

        // Set Initial Location
        this.setLocation(scrnsize.width / 2, scrnsize.height / 3);

        // Set Inital Size
        this.setSize(300, 200);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        menuEditGroup = new javax.swing.ButtonGroup();
        buttonEditGroup = new javax.swing.ButtonGroup();
        jButton1 = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openMenu = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        jCheckBoxTemporalFrame = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxTopicGraph = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxGeoFrame = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxLabelTopicFrame = new javax.swing.JCheckBoxMenuItem();
        helpMenu = new javax.swing.JMenu();
        helpItem = new javax.swing.JMenuItem();
        aboutItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("HirarchicalTopics");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("Myriad Pro", 0, 18)); // NOI18N
        jButton1.setText("Load Data");
        jButton1.setActionCommand("Load Data...");
        jButton1.setMargin(new java.awt.Insets(0, 5, 0, 0));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openItemActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, java.awt.BorderLayout.CENTER);

        menuBar.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N

        fileMenu.setText("File");

        openMenu.setText("Open File...");
        openMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openItemActionPerformed(evt);
            }
        });
        fileMenu.add(openMenu);

        menuBar.add(fileMenu);

        jMenu1.setText("Panels");

        jCheckBoxTemporalFrame.setSelected(true);
        jCheckBoxTemporalFrame.setText("Themeriver Frame");
        jCheckBoxTemporalFrame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxTemporalFrameActionPerformed(evt);
            }
        });
        jMenu1.add(jCheckBoxTemporalFrame);

        jCheckBoxTopicGraph.setSelected(true);
        jCheckBoxTopicGraph.setText("HierarchicalTopics Frame");
        jCheckBoxTopicGraph.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxTopicGraphActionPerformed(evt);
            }
        });
        jMenu1.add(jCheckBoxTopicGraph);

        jCheckBoxGeoFrame.setSelected(true);
        jCheckBoxGeoFrame.setText("GeoSpatial Frame");
        jCheckBoxGeoFrame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxGeoFrameActionPerformed(evt);
            }
        });
        jMenu1.add(jCheckBoxGeoFrame);

        jCheckBoxLabelTopicFrame.setSelected(true);
        jCheckBoxLabelTopicFrame.setText("Label/Topic Graph Frame");
        jCheckBoxLabelTopicFrame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxLabelTopicFrameActionPerformed(evt);
            }
        });
        jMenu1.add(jCheckBoxLabelTopicFrame);

        menuBar.add(jMenu1);

        helpMenu.setText("Help");

        helpItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        helpItem.setText("Help");
        helpMenu.add(helpItem);

        aboutItem.setText("About...");
        helpMenu.add(aboutItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    File currentPath = null;
    static public Map<Integer, Integer> parIdx2docIdx;

    private void openItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openItemActionPerformed

//               System.out.println("MySQL Connect Example.");
//        Connection conn = null;
//        String url = "jdbc:mysql://152.15.99.7/";
//        String dbName = "lda_results";
//        String driver = "com.mysql.jdbc.Driver";
//        String userName = "lee";
//        String password = "uncc_lee";
//        try {
//            Class.forName(driver).newInstance();
//            conn = (Connection) DriverManager.getConnection(url + dbName, userName, password);
//            System.out.println("Connected to the database");
//            
//            
//            String selectSQL = "select description, id from patents limit 1000";
//            
//            
//            
//            PreparedStatement preparedStatement = conn.prepareStatement(selectSQL);
//            //preparedStatement.setInt(1, 1001);
//            ResultSet rs = preparedStatement.executeQuery(selectSQL);
//
//
//            while (rs.next()) {
//
//                String userid = rs.getString("description");
//                String usernamea = rs.getString("id");
//
//                System.out.println("longitude : " + userid);
//                System.out.println("latitude : " + usernamea);
//
//            }
//
//
//            conn.close();
//            System.out.println("Disconnected from database");
//        } catch (Exception e) {
//            e.printStackTrace();
//        }
        JFileChooser chooser = new JFileChooser();
        chooser.setFileFilter(new javax.swing.filechooser.FileFilter() {
            public boolean accept(File f) {
                return (f.isDirectory() || f.getName().endsWith(".csv"));
            }

            public String getDescription() {
                return "CSV Files";
            }
        });

        if (currentPath == null) {
            chooser.setCurrentDirectory(new File(System.getProperty("user.dir")));
        } else {
            chooser.setCurrentDirectory(currentPath);
        }

        int option = chooser.showOpenDialog(this);

        if (option == JFileChooser.APPROVE_OPTION) {
            if (chooser.getSelectedFile() != null) {
                currentPath = chooser.getSelectedFile().getParentFile();
                String tmpURL = chooser.getSelectedFile().getAbsolutePath();

                String urltext = "file:///" + chooser.getSelectedFile().getAbsolutePath();
                urltext = urltext.replace('\\', '/');

                try {

                    if (tmpURL.endsWith("csv")) {

                        int idx = tmpURL.lastIndexOf("\\");
                        if (idx == -1) {
                            idx = tmpURL.lastIndexOf("/");
                        }
                        String folderPath = tmpURL.substring(0, idx + 1);

                        String headerPath = folderPath + "header.txt";

                        viewController.readHeaderFile(headerPath);

                        CSVFile csvf = new CSVFile(tmpURL);

                        csvf.readContents(viewController.b_readAll, viewController.b_readFromDB,
                                viewController.host, viewController.port, viewController.database, viewController.collection2, viewController.nameField2
                        );

                        viewController.setUsageRecord(csvf.getInternalRecord());

                        viewController.setInternalDocs(csvf.getInternalDocs());

                        viewController.setTopicSequence(csvf.getTopicSequence());

                        viewController.setTopicSimilarities(csvf.getTopicSimilarities());

                        viewController.getTopicDisplay().loadTopic(csvf.getAllTopics(), csvf.getTopicSequence());

                        viewController.getDocumentViewer().loadDocs(csvf.getInternalDocs());

                        viewController.setParidx2DocIdx(csvf.getParIdx2docIdx());

                        viewController.setFormat(csvf.getFormat());

                        viewController.setContentIdx(csvf.getContentIdx());

                        if (!viewController.b_readAll) {
                            viewController.setContentIdx(0);
                        }

                        setTitle("HirarchicalTopics" + csvf.getName());

                        /**
                         * Initialize temporal view*
                         */
                        viewController.setNewHueColors();

                        // Get the default toolkit
                        Toolkit toolkit = Toolkit.getDefaultToolkit();

                        // Get the current screen size
                        Dimension scrnsize = toolkit.getScreenSize();

                        String csvfilepath = csvf.getFolderPath();

                        viewController.csvfFolderPath = csvfilepath;
                        temporalFrame = new TemporalViewFrame(viewController, scrnsize.width / 2, scrnsize.height);
                        viewController.addTemporalFrame(temporalFrame);

                        temporalFrame.loadData(csvf.getFolderPath(), csvf.getInternalRecord(), csvf.getTopicSequence(), csvf.getYears(),
                                csvf.getInternalDocs(), csvf.getTermWeights(), csvf.getTermWeights_norm(), csvf.getTermIndex(), csvf.getAllTopics(),
                                csvfilepath, csvf.getContentIdx(), csvf.getFormat(), viewController.intervalDays, viewController.b_readAll, viewController.b_recaluateValue, viewController.zoomSubBins);

                        temporalFrame.setVisible(true);
                        temporalFrame.setSize(scrnsize.width / 2, scrnsize.height);
                        temporalFrame.setLocation(0, 0);
//           

                        System.out.println("Theme River Done!");

                        topicFrame = new TopicGraphViewFrame(viewController, csvf.getTermIndex(), csvf.getTermWeights());
                        viewController.addTopicGraphViewPanel(topicFrame);
                        viewController.getTopicGraphViewPanel().loadTopic(csvf.getAllTopics(), csvf.getTopicSequence());
                        System.out.println("topic frame load topics done.");

                        viewController.getTopicGraphViewPanel().buildTree(csvf.getFolderPath());

                        System.out.println("topic frame build tree done..");

                        topicFrame.setSize(scrnsize.width / 2, scrnsize.height);
                        topicFrame.setLocation(scrnsize.width / 2, 0);

                        viewController.getTopicGraphViewPanel().generateLayout();
                        topicFrame.setVisible(true);

                        System.out.println("Topics Graph done!");

                        temporalFrame.getMainPanel().buildLabelTimeMap();
                        //temporalFrame.getSubPanel().buildLabelTimeMap();

                        viewController.setLeafNodeSequence(topicFrame.getLeafSequence());

                        int s = viewController.getTopicGraphViewPanel().getTree().size();

                        FileInputStream inputStream = new FileInputStream(csvfilepath + "newTree_Node" + s + ".txt");

                        String treeString = IOUtils.toString(inputStream);

//
//                        MongoClient mongoClient = new MongoClient("152.15.99.7", 27017);
//                        DB db = mongoClient.getDB("patents");
//                        Set<String> colls = db.getCollectionNames();
//
//                        for (String s1 : colls) {
//                            System.out.println(s1);
//                        }
//
//                        DBCollection coll = db.getCollection("patent");
//                        System.out.println("database count : " + coll.getCount());
////                        
//                      
////                       DBCursor cursor = coll.find()
////                                BasicDBObject query = new BasicDBObject("_id", 71);
//                        
//                        List<Integer> abc = new ArrayList<Integer>();
//                        
//                        abc.add(1);
//                        
//                        abc.add(13);
//                        
//                        abc.add(1124);
//                        
//                        BasicDBObject query = new BasicDBObject("_id", new BasicDBObject("$in",abc));
//                                DBCursor cursor = coll.find(query);
//                      
//                                BasicDBObject dbo = (BasicDBObject)cursor.next();
//                                 System.out.println( dbo.get("_id"));
//                                 System.out.println(dbo.get("doc_id:"));
//                                 System.out.println( dbo.get("description"));
//                                //BasicDBList l = (BasicDBList)((BasicDBObject) cursor.next()).get("_id");
//                                //System.out.println(l);
////                       
//                                
//                                             
//                                                               
//                                                               
//                                
//                        
//                        
//                        try {
//                            while (cursor.hasNext()) {
//                                BasicDBList l = (BasicDBList)((BasicDBObject) cursor.next()).get("geo_extracted");
//                                //System.out.println(l);
//                                if (l == null)
//                                    continue;
//                                
//                                if (((String)(l.get(0))).length() == 0)
//                                    continue;
//                               
//                                if ( ((String)(l.get(1))).length() == 0)
//                                    continue;
//                                
//                                
//                                if (((String)(l.get(0))) == null)
//                                    continue;
//                               
//                                if ( ((String)(l.get(1))) == null)
//                                    continue;
//                                
//                                
//                                Point2D tempP = new Point2D.Double(Double.parseDouble((String)l.get(0)), Double.parseDouble((String)l.get(1)));
//                                geoLocations.add(tempP);
//                               // System.out.println((String)(l.get(0)) + "  " + (String)(l.get(1)));
//                               // System.out.println(tempP);
//                                
//                                if (geoLocations.size()>=10)
//                                    break;
//                              
//                            }
//                        } finally {
//                            cursor.close();
//                        }
//                        
                        //System.out.println(geoLocations.size());
                        //MongoClient.close();
                        //DBCursor cursor = coll.find();
//                        try {
//                           while(cursor.hasNext()) {
//                               System.out.println(cursor.next());
//                           }
//                        } finally {
//                           cursor.close();
//                        }
//                        
//                        BasicDBObject allQuery = new BasicDBObject();
//                        BasicDBObject fields = new BasicDBObject();
//                        fields.put("geo_extracted", 1);
//        
//        
//                        
//                        DBCursor cursor = coll.find(allQuery, fields);
//
//                       
//
//
////                        System.out.println("MySQL Connect Example.");
////                        Connection conn = null;
////                        String url = "jdbc:mysql://152.15.106.31/";
////                        String dbName = "streamingApr15";
////                        String driver = "com.mysql.jdbc.Driver";
////                        String userName = "data";
////                        String password = "uncc_ldav";
////    
////    
////    
////    try {
////      Class.forName(driver).newInstance();
////      conn = (Connection) DriverManager.getConnection(url+dbName,userName,password);
////       System.out.println("Connected to the database");
////      String selectSQL = "select longitude, latitude from location_entity limit 100";
////        PreparedStatement preparedStatement = conn.prepareStatement(selectSQL);
////        //preparedStatement.setInt(1, 1001);
////        ResultSet rs = preparedStatement.executeQuery(selectSQL );
////
////
////      while (rs.next()) {
//// 
////				String userid = rs.getString("longitude");
////				String username = rs.getString("latitude");
//// 
////				System.out.println("longitude : " + userid);
////				System.out.println("latitude : " + username);
//// 
////			}
////      
////     
////      conn.close();
////      System.out.println("Disconnected from database");
////    } catch (Exception e) {
////      e.printStackTrace();
////    }
                        Graph pgh = null;//(viewController.makePrefuseGraph(treeString));
//

                        System.out.println("get geo locations done");
                        viewController.geoLocations = csvf.getTwitterGeoLocations();

//                        WorldMapProcessingFrame worldMapFrame = new WorldMapProcessingFrame(viewController,csvf.getTwitterGeoLocations(), csvf.getMediumLocation());
//                        viewController.addWorldMapProcessingFrame(worldMapFrame);
//                        worldMapFrame.setSize(1000, 1000);
//                        worldMapFrame.setVisible(true);
////
//                        
                        viewController.twitterPointMax = csvf.getMaxLocation();
                        viewController.twitterPointMin = csvf.getMinLocation();

                        vcGeoFrame = new VastGeoFrame(viewController, csvf.getFolderPath(), csvf.getTwitterGeoLocations());

                        viewController.setVCGF(vcGeoFrame);

                        vcGeoFrame.setVisible(true);

//
                        System.out.println("GeoFrame done");

                        eventViewFrame = new EventViewFrame(viewController, temporalFrame.getTree(), temporalFrame.getData(), viewController.getLeafNodeSequence(),
                                viewController.getTopicGraphViewPanel().getGh(), pgh, treeString, folderPath, csvf.getSimilarityMatrix());
//                       
                        eventViewFrame.setVisible(true);

                        System.out.println("label graph done");

                        vcGeoFrame.addWindowListener(new java.awt.event.WindowAdapter() {
                            @Override
                            public void windowClosing(java.awt.event.WindowEvent windowEvent) {
                                jCheckBoxGeoFrame.setState(false);
                            }
                        });

                        eventViewFrame.addWindowListener(new java.awt.event.WindowAdapter() {
                            @Override
                            public void windowClosing(java.awt.event.WindowEvent windowEvent) {
                                jCheckBoxLabelTopicFrame.setState(false);
                            }
                        });

                        topicFrame.addWindowListener(new java.awt.event.WindowAdapter() {
                            @Override
                            public void windowClosing(java.awt.event.WindowEvent windowEvent) {
                                jCheckBoxTopicGraph.setState(false);
                            }
                        });

                        temporalFrame.addWindowListener(new java.awt.event.WindowAdapter() {
                            @Override
                            public void windowClosing(java.awt.event.WindowEvent windowEvent) {
                                jCheckBoxTemporalFrame.setState(false);
                            }
                        });

                    }
                } catch (Exception e) {
                    System.out.println(e.toString() + e.getMessage());
                }

            }
        }
    }//GEN-LAST:event_openItemActionPerformed

    /**
     * Exit the Application
     */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        System.exit(0);
    }//GEN-LAST:event_exitForm

    private void jCheckBoxTemporalFrameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxTemporalFrameActionPerformed

        boolean currentState = jCheckBoxTemporalFrame.getState();
        temporalFrame.setVisible(currentState);        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBoxTemporalFrameActionPerformed

    private void jCheckBoxTopicGraphActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxTopicGraphActionPerformed
        // TODO add your handling code here:
         boolean currentState = jCheckBoxTopicGraph.getState();
        topicFrame.setVisible(currentState); 
    }//GEN-LAST:event_jCheckBoxTopicGraphActionPerformed

    private void jCheckBoxGeoFrameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxGeoFrameActionPerformed
        // TODO add your handling code here:
        boolean currentState = jCheckBoxGeoFrame.getState();
        vcGeoFrame.setVisible(currentState);
    }//GEN-LAST:event_jCheckBoxGeoFrameActionPerformed

    private void jCheckBoxLabelTopicFrameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxLabelTopicFrameActionPerformed
        // TODO add your handling code here:
        boolean currentState = jCheckBoxLabelTopicFrame.getState();
        eventViewFrame.setVisible(currentState);
    }//GEN-LAST:event_jCheckBoxLabelTopicFrameActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        UIManager.put("org.mediavirus.parvis.gui.ParallelDisplayUI", "org.mediavirus.parvis.gui.BasicParallelDisplayUI");
        new MinimalismMainFrame().show();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutItem;
    private javax.swing.ButtonGroup buttonEditGroup;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenuItem helpItem;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JButton jButton1;
    private javax.swing.JCheckBoxMenuItem jCheckBoxGeoFrame;
    private javax.swing.JCheckBoxMenuItem jCheckBoxLabelTopicFrame;
    private javax.swing.JCheckBoxMenuItem jCheckBoxTemporalFrame;
    private javax.swing.JCheckBoxMenuItem jCheckBoxTopicGraph;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.ButtonGroup menuEditGroup;
    private javax.swing.JMenuItem openMenu;
    // End of variables declaration//GEN-END:variables
}
