/*
 */
package com.TasteAnalytics.Apollo.GUI;

import com.TasteAnalytics.Apollo.TemporalView.TemporalViewFrame;
import com.TasteAnalytics.Apollo.TemporalView.TreeNode;
import com.TasteAnalytics.Apollo.TopicRenderer.TopicGraphViewPanel;
import com.TasteAnalytics.Apollo.TopicRenderer.VastGeoFrame;
import com.TasteAnalytics.Apollo.TopicRenderer.WorldMapProcessingPanel;
import com.TasteAnalytics.Apollo.TreeMapView.TopicTreeMapPanel;
import com.TasteAnalytics.Apollo.datahandler.LDAHTTPClient;
import com.TasteAnalytics.Apollo.eventsview.EventViewFrame;
import com.TasteAnalytics.Apollo.file.CSVFile;
import com.mongodb.BasicDBList;
import com.mongodb.BasicDBObject;
import com.mongodb.DB;
import com.mongodb.DBCollection;
import com.mongodb.DBCursor;
import com.mongodb.DBObject;
import com.mongodb.MongoClient;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentEvent;
import java.awt.event.ComponentListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.*;
import java.net.UnknownHostException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.border.Border;

/**
 *
 * @authors Taste Analytics, LLC
 * @version 1000 All rights reserved, Taste Analytics, LLC, 2014
 */
public class MinimalismMainFrame extends javax.swing.JFrame implements Runnable {

    /// Main View Controller
    private ViewController viewController;
    /// Multi Thread Initiator
    private final Thread thread;
    /// Mongo Connector
    private LDAHTTPClient connection = null;
    /// Console Frame Declaration
    private ConsoleFrame consoleFrame = null;

//    File currentPath = null;
//    static public Map<Integer, Integer> parIdx2docIdx;
    DocumentViewer documentViewer = null;
    TemporalViewFrame temporalFrame = null;
    TopicGraphViewPanel topicFrame = null;
    VastGeoFrame vcGeoFrame = null;
    EventViewFrame eventViewFrame = null;
    WorldMapProcessingPanel worldPanel = null;
    //TreeMapProcessingPanel treemapPanel = null;
    TopicTreeMapPanel treeMapPanel = null;

    JSplitPane mainSplit;
    JSplitPane leftSplit, rightSplit;
    JScrollPane leftTopScrollPane, leftBottomScrollPane;
    JScrollPane rightTopScrollPane, rightBottomScrollPane;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        menuEditGroup = new javax.swing.ButtonGroup();
        buttonEditGroup = new javax.swing.ButtonGroup();
        mViewPanel = new javax.swing.JPanel();
        MenuPanel = new javax.swing.JPanel();
        jComboBoxAnalytics = new javax.swing.JComboBox();
        jCheckBoxConsoleMenu = new javax.swing.JCheckBox();
        jProgressBarSystem = new javax.swing.JProgressBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("HirarchicalTopics");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        mViewPanel.setBackground(new java.awt.Color(39, 39, 39));
        mViewPanel.setLayout(new java.awt.BorderLayout());

        MenuPanel.setBackground(new java.awt.Color(39, 39, 39));
        MenuPanel.setLayout(new java.awt.GridLayout(1, 0));

        jComboBoxAnalytics.setFont(new java.awt.Font("Gill Sans", 0, 14)); // NOI18N
        jComboBoxAnalytics.setMaximumRowCount(12);
        jComboBoxAnalytics.setToolTipText("Choose Analytics Results");
        jComboBoxAnalytics.setMaximumSize(new java.awt.Dimension(52, 27));
        MenuPanel.add(jComboBoxAnalytics);

        jCheckBoxConsoleMenu.setBackground(new java.awt.Color(39, 39, 39));
        jCheckBoxConsoleMenu.setFont(new java.awt.Font("Gill Sans", 0, 14)); // NOI18N
        jCheckBoxConsoleMenu.setForeground(new java.awt.Color(255, 255, 255));
        jCheckBoxConsoleMenu.setText("Console");
        jCheckBoxConsoleMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxConsoleMenuActionPerformed(evt);
            }
        });
        MenuPanel.add(jCheckBoxConsoleMenu);
        MenuPanel.add(jProgressBarSystem);

        mViewPanel.add(MenuPanel, java.awt.BorderLayout.PAGE_START);

        getContentPane().add(mViewPanel, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Exit the Application
     */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        System.exit(0);
    }//GEN-LAST:event_exitForm

    private void jCheckBoxConsoleMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxConsoleMenuActionPerformed
                                    
        consoleFrame.setVisible(jCheckBoxConsoleMenu.isSelected());        
        
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBoxConsoleMenuActionPerformed

    void initializeViews(CSVFile csvf) throws IOException {

        temporalFrame.getMainPanel().buildLabelTimeMap();

        consoleFrame.addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(java.awt.event.WindowEvent windowEvent) {
                jCheckBoxConsoleMenu.setSelected(false);
            }
        });

//        vcGeoFrame.addWindowListener(new java.awt.event.WindowAdapter() {
//            @Override
//            public void windowClosing(java.awt.event.WindowEvent windowEvent) {
//                jCheckBoxGeoFrame.setState(false);
//            }
//        });
//        eventViewFrame.addWindowListener(new java.awt.event.WindowAdapter() {
//            @Override
//            public void windowClosing(java.awt.event.WindowEvent windowEvent) {
//                jCheckBoxLabelTopicFrame.setState(false);
//            }
//        });
//        topicFrame.addWindowListener(new java.awt.event.WindowAdapter() {
//            @Override
//            public void windowClosing(java.awt.event.WindowEvent windowEvent) {
//                jCheckBoxTopicGraph.setState(false);
//            }
//        });
//        temporalFrame.addWindowListener(new java.awt.event.WindowAdapter() {
//            @Override
//            public void windowClosing(java.awt.event.WindowEvent windowEvent) {
//                jCheckBoxTemporalFrame.setState(false);
//            }
//        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel MenuPanel;
    private javax.swing.ButtonGroup buttonEditGroup;
    private javax.swing.JCheckBox jCheckBoxConsoleMenu;
    private javax.swing.JComboBox jComboBoxAnalytics;
    private javax.swing.JProgressBar jProgressBarSystem;
    private javax.swing.JPanel mViewPanel;
    private javax.swing.ButtonGroup menuEditGroup;
    // End of variables declaration//GEN-END:variables

    public void run() {

        
        this.setExtendedState( JFrame.NORMAL );
        this.setPreferredSize(new Dimension(1200,800));
        this.setSize(1200,800);
        
        
        viewController = new ViewController();
        jCheckBoxConsoleMenu.setSelected(true);

        consoleFrame = new ConsoleFrame();
        consoleFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        consoleFrame.setVisible(true);

        documentViewer = new DocumentViewer(viewController);
        documentViewer.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        viewController.addDocumentViewer(documentViewer);

        /// Load the Analytics Data from the MongoDB
        this.loadComboMenuItems();

    }

    private void loadComboMenuItems() {

        // TODO: This need to be placed in Setting Menu
        viewController.host = "caprica.uncc.edu";//"10.18.203.130";//10.18.202.126"; //"54.209.61.133"; 10.18.203.130
        viewController.b_readFromDB = true;
        viewController.setGlobalReadIndex(0);

        
        
        
//        for (int i=0; i<35;i++)
//            viewController.topicWeights.add(10000.0f);
//        
//        
////        viewController.topicWeights.add(14681.0f);
////        viewController.topicWeights.add(4294.0f);
////        viewController.topicWeights.add(22731.0f);
////        viewController.topicWeights.add(7367.0f);
////        viewController.topicWeights.add(2595.0f);
////        viewController.topicWeights.add(4817.0f);
////        viewController.topicWeights.add(21857.0f);
////        viewController.topicWeights.add(3717.0f);
////        viewController.topicWeights.add(16748.0f);
////        viewController.topicWeights.add(1230.0f);
////        viewController.topicWeights.add(3079.0f);
////        viewController.topicWeights.add(3265.0f);
////        viewController.topicWeights.add(3530.0f);
////        viewController.topicWeights.add(1849.0f);
////        viewController.topicWeights.add(3352.0f);
//        
//               
//        viewController.topicWeights.add(1045752.0f);
//        viewController.topicWeights.add(54990.0f);
//        viewController.topicWeights.add(9929.0f);
//        viewController.topicWeights.add(1364254.0f);
//        viewController.topicWeights.add(381764.0f);
//        viewController.topicWeights.add(1.0f);
//        viewController.topicWeights.add(1656258.0f);
//        viewController.topicWeights.add(18.0f);
//        viewController.topicWeights.add(8867.0f);
//        viewController.topicWeights.add(7912.0f);
//        viewController.topicWeights.add(474409.0f);
//        viewController.topicWeights.add(3.0f);
//        viewController.topicWeights.add(10709.0f);
//        viewController.topicWeights.add(715914.0f);
//        viewController.topicWeights.add(79491.0f);
//        

        
        
        
        connection = new LDAHTTPClient("http", viewController.host, String.valueOf(viewController.port));
        try {
            connection.login();
        } catch (IOException ex) {
            Logger.getLogger(MinimalismMainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            for (Object r : (ArrayList) connection.getJobs()) {
                this.jComboBoxAnalytics.addItem((Object) ((HashMap) r).get("_id"));
            }

        } catch (IOException ex) {
            Logger.getLogger(MinimalismMainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

        jComboBoxAnalytics.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {

                String job = (String) ((JComboBox) e.getSource()).getSelectedItem();
                viewController.collection = job;

                // TODO: Li, please comment on the use of the CSVFile? Export?
                CSVFile csvf = new CSVFile("");
                try {

                    // viewController.setUsageRecord(csvf.getInternalRecord());
                    //viewController.setInternalDocs(csvf.getInternalDocs());
                    // viewController.setTopicSimilarities(csvf.getTopicSimilarities());
                    List<String[]> topics = new ArrayList<String[]>();

                    HashMap<String, String[]> topicsByMongo = new HashMap<String, String[]>();

                    for (Object r : (ArrayList) connection.getJobDocs(job, "topic")) {

                        String Key = (String) ((HashMap) r).get("_id");

                        if (((HashMap) r).get("terms") instanceof BasicDBList) {
                            BasicDBList terms = ((BasicDBList) ((HashMap) r).get("terms"));

                            String[] tmpdest = new String[terms.size() + 2];
                            tmpdest[0] = "Group";
                            tmpdest[1] = Key;
                            for (int i = 0; i < terms.size(); i++) {
                                tmpdest[2 + i] = (String) terms.get(i);

                            }
                            topicsByMongo.put(Key, tmpdest);

                        } else {

                            String terms = (String) ((HashMap) r).get("terms");
                            String[] tmps = terms.split(",");
                            String[] tmpdest = new String[tmps.length + 2];
                            tmpdest[0] = "Group";
                            tmpdest[1] = Key;
                            System.arraycopy(tmps, 0, tmpdest, 2, tmps.length);
                            topicsByMongo.put(Key, tmpdest);
                        }
                    }
                    for (int i = 0; i < topicsByMongo.size(); i++) {
                        String key = "t" + Integer.toString(i);
                        topics.add(topicsByMongo.get(key));
                    }

                    System.out.append("topk loaded");

                    for (Object r : (ArrayList) connection.getJob(job)) {
                        HashMap hr = (HashMap) r;
                        List<String> ls = ((List) hr.get("field"));
                        if (ls != null) {
                            viewController.nameFields = new String[ls.size()];
                            for (int i = 0; i < ls.size(); i++) {
                                viewController.nameFields[i] = ls.get(i);
                            }
                        } else {
                            viewController.nameFields = null;
                        }

                        //               String field = String.valueOf(hr.get("field"));
                        //               field = field.replaceAll("\\[","");
                        //               field = field.replaceAll("\\]","");
                        //                       field = field.replaceAll("\"","");
                        //                        field = field.replaceAll(" ","");
                        //               viewController.nameFields = field.split(",");
                        viewController.text_id = ((String) (((HashMap) (hr.get("mongo_input"))).get("text_index")));
                        viewController.database = ((String) (((HashMap) (hr.get("mongo_input"))).get("db")));
                        viewController.table = ((String) (((HashMap) (hr.get("mongo_input"))).get("table")));
                        viewController.id_type = ((String) (((HashMap) (hr.get("mongo_input"))).get("_id_type")));

                        viewController.id_type = ((String) (((HashMap) (hr.get("mongo_input"))).get("_id_type")));
                        viewController.tagLDA = Boolean.parseBoolean(String.valueOf(((HashMap) (hr.get("meta"))).get("tlda")));

                    }

                    // Make sure all the backend and frontend are agreeing to this.
                    SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

                    viewController.setFormat(format);

                    HashMap<String, Float> topicWeightMongo = new HashMap<String, Float>();
                    for (Object r : (ArrayList) connection.getJobDocs(job, "top_wt")) {
                        
                        HashMap hr = (HashMap) r;
                        
                          String key = (String) hr.get("_id");
                          float weights = Float.parseFloat( String.valueOf(hr.get("weight")));
                          if (weights == 0)
                              weights = 1;
                          
                          topicWeightMongo.put(key, weights);
                        
                        
                        
                    }
                    
                    
                    for (int i=0; i<topicWeightMongo.size(); i++)
                    {
                         String key = "two" + (new Integer(i)).toString();
                         
                         viewController.topicWeights.add(topicWeightMongo.get(key));
                        
                        
                    }
                    
                    String TreeString = "";
                    
                     for (Object r : (ArrayList) connection.getJobDocs(job, "flat")) {
                        TreeString = (String) ((HashMap) r).get("tree");
                    }
                         

//                    for (Object r : (ArrayList) connection.getJobDocs(job, "flat")) {
//                        //System.out.println(r);
//                        TreeString = "digraphgraph{\n" +
//"'Node16','LeafTopic0','LeafTopic1','LeafTopic2','LeafTopic3','LeafTopic4','LeafTopic5','LeafTopic6','LeafTopic7','LeafTopic8','LeafTopic9','LeafTopic10','LeafTopic11','LeafTopic12','LeafTopic13','LeafTopic14',\n" +
//"('Node16','LeafTopic0'),('Node16','LeafTopic1'),('Node16','LeafTopic2'),('Node16','LeafTopic3'),('Node16','LeafTopic4'),('Node16','LeafTopic5'),('Node16','LeafTopic6'),('Node16','LeafTopic7'),('Node16','LeafTopic8'),('Node16','LeafTopic9'),('Node16','LeafTopic10'),('Node16','LeafTopic11'),('Node16','LeafTopic12'),('Node16','LeafTopic13'),('Node16','LeafTopic14'),}";
////(String) ((HashMap) r).get("tree");
//                    }
                    
//                    for (Object r : (ArrayList) connection.getJobDocs(job, "flat")) {
//                    TreeString = "digraphgraph{\n" +
//"'Node21','LeafTopic0','LeafTopic1','LeafTopic2','LeafTopic3','LeafTopic4','LeafTopic5','LeafTopic6','LeafTopic7','LeafTopic8','LeafTopic9','LeafTopic10','LeafTopic11','LeafTopic12','LeafTopic13','LeafTopic14','LeafTopic15','LeafTopic16','LeafTopic17','LeafTopic18','LeafTopic19',\n" +
//"('Node21','LeafTopic0'),('Node21','LeafTopic1'),('Node21','LeafTopic2'),('Node21','LeafTopic3'),('Node21','LeafTopic4'),('Node21','LeafTopic5'),('Node21','LeafTopic6'),('Node21','LeafTopic7'),('Node21','LeafTopic8'),('Node21','LeafTopic9'),('Node21','LeafTopic10'),('Node21','LeafTopic11'),('Node21','LeafTopic12'),('Node21','LeafTopic13'),('Node21','LeafTopic14'),('Node21','LeafTopic15'),('Node21','LeafTopic16'),('Node21','LeafTopic17'),('Node21','LeafTopic18'),('Node21','LeafTopic19'),}";
//
////(String) ((HashMap) r).get("tree");
//
//                    }

                    List<HashMap> maplocations = new ArrayList<HashMap>();

                    for (Object r : (ArrayList) connection.getGroupbyDocs("name", viewController.database, viewController.table, "latitude", "longitude")) {
                        maplocations.add((HashMap) r);
                    }

                    //        q1 = new BasicDBObject("type", "flat");
                    //        cursorfind = currentColl.find(q1);
                    //        BasicDBObject dbo1 = (BasicDBObject) cursorfind.next();
                    //        TreeString = dbo1.getString("tree");
                    viewController.setNewHueColors();

                    Toolkit toolkit = Toolkit.getDefaultToolkit();

                    Dimension scrnsize = toolkit.getScreenSize();

                    String csvfilepath = csvf.getFolderPath();
                    viewController.csvfFolderPath = csvfilepath;
                    viewController.csvfFolderPath = ".\\";

                    temporalFrame = new TemporalViewFrame(viewController, 600,800);//scrnsize.width / 2, scrnsize.height);

                    viewController.addTemporalFrame(temporalFrame);

                    temporalFrame.loadCacheData(job, TreeString, viewController.host);
            //temporalFrame.createWorldMap(maplocations);

                    //temporalFrame.setVisible(true);
                    //temporalFrame.setSize(scrnsize.width / 2, scrnsize.height);
                    //temporalFrame.setLocation(0, 0);
                    HashMap<String, Float> termWeightMongo = new HashMap<String, Float>();
                    List<List<Float>> topkTermWeightMongo = new ArrayList<List<Float>>();

                    HashMap<String, String> topicSimMongo = new HashMap<String, String>();
                    List<List<Float>> topicSim = new ArrayList<List<Float>>();

                    if (viewController.b_readFromDB) {

                        for (Object r : (ArrayList) connection.getJobDocs(job, "topic_terms")) {
                            HashMap hr = (HashMap) r;

                            String key = (String) hr.get("_id");
                            double weights = (Double) hr.get("weight");

                            // float tmpvalue = Float.parseFloat(weights);
                            termWeightMongo.put(key, (float) weights);
                        }

                        for (int i = 0; i < topicsByMongo.size(); i++) {
                            List<Float> tmpL = new ArrayList<Float>();
                            for (int j = 0; j < 50; j++) // hard code
                            {
                                String key = "dist_top" + (new Integer(i)).toString() + "term" + (new Integer(j)).toString();
                                tmpL.add(termWeightMongo.get(key));
                            }
                            topkTermWeightMongo.add(tmpL);

                        }

                        for (Object r : (ArrayList) connection.getJobDocs(job, "top_sim")) {
                            HashMap hr = (HashMap) r;
                            String key = (String) hr.get("_id");
                            String weights = (String) hr.get("weights");
                            // float tmpvalue = Float.parseFloat(weights);
                            topicSimMongo.put(key, weights);

                        }

                        for (int i = 0; i < topicSimMongo.size(); i++) {
                            List<Float> tmpL = new ArrayList<Float>();
                            String key = "topsim" + (new Integer(i)).toString();
                            String weights = topicSimMongo.get(key);
                            String[] tmps = weights.split(",");
                            for (String tmp : tmps) {
                                tmpL.add(Float.parseFloat(tmp));
                            }
                            topicSim.add(tmpL);
                        }
                        csvf.setSimilarityMatrix(topicSim);
                    }

                  
                    topicFrame = new TopicGraphViewPanel(viewController, csvf.getTermIndex(), csvf.getTermWeights(), topkTermWeightMongo);
                    viewController.addTopicGraphViewPanel(topicFrame);
                    viewController.getTopicGraphViewPanel().loadTopic(topics);
                    System.out.println("topic frame load topics done.");

                    viewController.getTopicGraphViewPanel().buildTreeWithTreeString(TreeString);

                    System.out.println("topic frame build tree done..");

                    topicFrame.setSize(scrnsize.width / 2, scrnsize.height);
                    topicFrame.setLocation(scrnsize.width / 2, 0);

                    viewController.getTopicGraphViewPanel().generateLayout();
                    topicFrame.setVisible(true);
                    
                      temporalFrame.PreDrawAllLeafs();


//for (int i=0;i<35;i++)                    
//    viewController.topicEventsCount.add(1.0f);
                      
                      
                      
                    worldPanel = new WorldMapProcessingPanel(viewController, maplocations, 1200, 1200);
                    
                    JFrame jp = new JFrame();
                    jp.setSize(new Dimension(1000, 1000));
                    jp.add(worldPanel);
                    jp.setVisible(true);
//            treemapPanel = new TreeMapProcessingPanel(topicFrame.getTree());
//            
//            
//            treemapPanel.setVisible(true);

                    initializeViews(csvf);
//                     for (Object r : (ArrayList) connection.getJobDocs(job, "sent_agg")) {
//                         HashMap a = (HashMap ) r;
//                         
//                     }
                    
                    
                    MongoClient mongoClient = null;
                try {
                        mongoClient = new MongoClient(viewController.host, 27017);
                    } catch (UnknownHostException ex) {
                        System.out.println("DB begin load cache error");
                    }

                DB db = mongoClient.getDB("lda_results");

                db.authenticate("li", "li_user_2010".toCharArray());
                DBCollection currentColl = db.getCollection(job);
                DBCursor cursor = null;

                DBObject dbo = null;
                    
                    BasicDBObject query = new BasicDBObject();
//
                    query.put("type", "sent_agg");

//
                    
                    
                    
            cursor = currentColl.find(query);
            while (cursor.hasNext())
            {
                      dbo = (DBObject) cursor.next();
                      String c = String.valueOf( dbo.get("count"));
                      String p = String.valueOf (dbo.get("pos"));
                      String n = String.valueOf(dbo.get("neg"));
                      TreeNode.SentimentModel sm ;
                      
                      sm = new TreeNode.SentimentModel(Integer.parseInt(p),Integer.parseInt(n), Integer.parseInt(c));
                      String ids = String.valueOf(dbo.get("_id"));
                     
                      
                      int index = Integer.parseInt(ids.substring(3));
                viewController.sen.put(index, sm);
                
            }
            
            mongoClient.close();

//

                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    

                    treeMapPanel = new TopicTreeMapPanel(viewController, topicFrame.getTree(), 600,800);//scrnsize.width/2, scrnsize.height);
                    viewController.setTmp(treeMapPanel);

                    System.out.println("Topics Graph done!");

//            PrefuseLabelTopicGraphPanel labelTopicGraphPanel = null;
//            if (viewController.tagLDA) {
//                labelTopicGraphPanel = new PrefuseLabelTopicGraphPanel(viewController.csvfFolderPath, viewController, csvf.getSimilarityMatrix());
//            }
//
//            //        Border orangeLine = BorderFactory.createLineBorder(Color.orange);
//            //        mButtonPanel.setBorder(orangeLine);
//            rightTopScrollPane = new JScrollPane(topicFrame, ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED, ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);
//            rightTopScrollPane.setViewportView(topicFrame);
//
//            rightBottomScrollPane = new JScrollPane(labelTopicGraphPanel, ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED, ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);
//            rightBottomScrollPane.setViewportView(labelTopicGraphPanel);
//
//            leftTopScrollPane = new JScrollPane(temporalFrame, ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED, ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);
//            leftTopScrollPane.setViewportView(temporalFrame);
//
//            leftBottomScrollPane = new JScrollPane(treeMapPanel/*worldPanel*/, ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED, ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);
//            leftBottomScrollPane.setViewportView(treeMapPanel/*worldPanel*/);
//
//            leftSplit = new JSplitPane(JSplitPane.VERTICAL_SPLIT,leftTopScrollPane, leftBottomScrollPane);
//            leftSplit.setOneTouchExpandable(true);
//            leftSplit.setDividerLocation(0.8d);
//            leftSplit.setResizeWeight(0.8d);
//
//            rightSplit = new JSplitPane(JSplitPane.VERTICAL_SPLIT,rightTopScrollPane, rightBottomScrollPane);
//            rightSplit.setOneTouchExpandable(true);
//            rightSplit.setDividerLocation(0.8d);
//            leftSplit.setResizeWeight(0.8d);
            mainSplit = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT, treeMapPanel, temporalFrame);
                //leftSplit, rightSplit);
            mainSplit.setOneTouchExpandable(true);
            mainSplit.setDividerLocation(0.5d);
            mainSplit.setResizeWeight(0.5d);

            mainSplit.setContinuousLayout(true);
            
            
            mainSplit.addPropertyChangeListener(JSplitPane.DIVIDER_LOCATION_PROPERTY, new PropertyChangeListener() {
                        @Override
                        public void propertyChange(PropertyChangeEvent pce) {
                            // do here
                            
                           if (treeMapPanel!=null)
                            {

                             //treeMapPanel.setPreferredSize( new Dimension(e.getComponent().getSize().width, e.getComponent().getSize().height));
                             treeMapPanel.updateTreeLayout( mainSplit.getLeftComponent().getWidth(),   mainSplit.getLeftComponent().getHeight());
                             treeMapPanel.invalidate();
                             treeMapPanel.getRootPane().revalidate();
                            }
                        }

//                        public void propertyChange(PropertyChangeEvent evt) {
//                            throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
//                        }
                    });
//
//            //Provide minimum sizes for the two components in the split pane
//            Dimension minimumSize = new Dimension(200, 100);
//            leftTopScrollPane.setMinimumSize(minimumSize);
//            leftBottomScrollPane.setMinimumSize(minimumSize);
//
//            rightTopScrollPane.setMinimumSize(minimumSize);
//            rightBottomScrollPane.setMinimumSize(minimumSize);
//
//            Dimension maximumSize = new Dimension(1000, 1000);
//            leftBottomScrollPane.setMaximumSize(maximumSize);
//            rightTopScrollPane.setMaximumSize(maximumSize);
//            rightBottomScrollPane.setMaximumSize(maximumSize);
//            
                    Border blackline = BorderFactory.createLineBorder(Color.black);
                    mViewPanel.setBorder(blackline);
                    mViewPanel.add(mainSplit);
                    //mViewPanel.add(treeMapPanel);
                    
                    
                    
                    

                } catch (IOException ex) {
                    Logger.getLogger(MinimalismMainFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                try {
                    connection.close();

                    // TODO add your handling code here:
                } catch (IOException ex) {
                    Logger.getLogger(MinimalismMainFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    public MinimalismMainFrame() {
        initComponents();
        
        
        this.setTitle("Apollo Analytics");
           thread = new Thread(this);
           
           
           
        this.addComponentListener(new ComponentListener() {
            

            public void componentResized(ComponentEvent e) {
                
               if (mViewPanel!=null)
                mViewPanel.setPreferredSize( new Dimension(e.getComponent().getSize().width, e.getComponent().getSize().height));
               
               if (mainSplit!=null)
               {
                   mainSplit.setPreferredSize(new Dimension(e.getComponent().getSize().width, e.getComponent().getSize().height));
               }

               
               invalidate();
               
            }
     

            public void componentMoved(ComponentEvent e) {
               
                //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }

            public void componentShown(ComponentEvent e) {
                //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }

            public void componentHidden(ComponentEvent e) {
                //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }
        });
        
                }

    public void start() {
        thread.start();
    }
}
