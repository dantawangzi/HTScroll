/*
 */
package com.TasteAnalytics.Apollo.GUI;

import com.TasteAnalytics.Apollo.TemporalView.TemporalViewFrame;
import com.TasteAnalytics.Apollo.TemporalView.TreeNode;
import com.TasteAnalytics.Apollo.TopicRenderer.TopicGraphViewPanel;
import com.TasteAnalytics.Apollo.TopicRenderer.VastGeoFrame;
import com.TasteAnalytics.Apollo.TopicRenderer.WorldMapProcessingPanel;
import com.TasteAnalytics.Apollo.TreeMapView.TopicTreeMapPanel;
import com.TasteAnalytics.Apollo.Util.SystemPreferences;
import com.TasteAnalytics.Apollo.datahandler.LDAHTTPClient;
import com.TasteAnalytics.Apollo.eventsview.EventViewFrame;
import com.TasteAnalytics.Apollo.file.CSVFile;
import com.mongodb.BasicDBList;
import com.mongodb.BasicDBObject;
import com.mongodb.DB;
import com.mongodb.DBCollection;
import com.mongodb.DBCursor;
import com.mongodb.DBObject;
import com.mongodb.MongoClient;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentEvent;
import java.awt.event.ComponentListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.image.BufferedImage;
import java.io.*;
import java.net.UnknownHostException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.*;

/**
 *
 * @authors Taste Analytics, LLC
 * @version 1000 All rights reserved, Taste Analytics, LLC, 2014
 */
public class DashboardFrame extends javax.swing.JFrame implements Runnable {

    /// Main View Controller
    private ViewController viewController;
    /// Multi Thread Initiator
    private final Thread thread;
    /// Mongo Connector
    private LDAHTTPClient connection = null;
    /// Console Frame Declaration
    private ConsoleFrame consoleFrame = null;

    private LoginPanel loginPanel = null;

//    File currentPath = null;
//    static public Map<Integer, Integer> parIdx2docIdx;
    DocumentViewer documentViewer = null;
    TemporalViewFrame temporalFrame = null;
    TopicGraphViewPanel topicFrame = null;
    VastGeoFrame vcGeoFrame = null;
    EventViewFrame eventViewFrame = null;
    WorldMapProcessingPanel worldPanel = null;
    //TreeMapProcessingPanel treemapPanel = null;
    TopicTreeMapPanel treeMapPanel = null;

    JSplitPane mainSplit;
    JSplitPane leftSplit, rightSplit;
    JScrollPane leftTopScrollPane, leftBottomScrollPane;
    JScrollPane rightTopScrollPane, rightBottomScrollPane;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        menuEditGroup = new javax.swing.ButtonGroup();
        buttonEditGroup = new javax.swing.ButtonGroup();
        mViewPanel = new javax.swing.JPanel();
        MenuPanel = new javax.swing.JPanel();
        jComboBoxAnalytics = new javax.swing.JComboBox();
        buttonDisplayInformation = new java.awt.Button();
        jSliderTopicChooser = new javax.swing.JSlider();
        jRadioButton1 = new javax.swing.JRadioButton();
        jCheckBoxConsoleMenu = new javax.swing.JCheckBox();
        jTextSearchFieldMain = new javax.swing.JTextField();
        jProgressBarSystem = new javax.swing.JProgressBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Apollo Analytics");
        setBackground(new java.awt.Color(0, 52, 128));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        mViewPanel.setBackground(new java.awt.Color(39, 39, 39));
        mViewPanel.setLayout(new java.awt.BorderLayout());

        MenuPanel.setBackground(new java.awt.Color(0, 52, 128));

        jComboBoxAnalytics.setFont(new java.awt.Font("Gill Sans", 0, 14)); // NOI18N
        jComboBoxAnalytics.setMaximumRowCount(12);
        jComboBoxAnalytics.setToolTipText("Choose Analytics Results");
        jComboBoxAnalytics.setMaximumSize(new java.awt.Dimension(52, 27));
        MenuPanel.add(jComboBoxAnalytics);

        buttonDisplayInformation.setActionCommand("DataInfo");
        buttonDisplayInformation.setLabel("DataInfo");
        buttonDisplayInformation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDisplayInformationActionPerformed(evt);
            }
        });
        MenuPanel.add(buttonDisplayInformation);
        buttonDisplayInformation.getAccessibleContext().setAccessibleName("buttonDisplayInfo");

        jSliderTopicChooser.setToolTipText("Select Number of Topic Groups");
        jSliderTopicChooser.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSliderTopicChooserStateChanged(evt);
            }
        });
        MenuPanel.add(jSliderTopicChooser);

        jRadioButton1.setForeground(new java.awt.Color(255, 255, 255));
        jRadioButton1.setSelected(true);
        jRadioButton1.setText("Normalize?");
        jRadioButton1.setToolTipText("Normalize all the temporal values");
        jRadioButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton1ActionPerformed(evt);
            }
        });
        MenuPanel.add(jRadioButton1);

        jCheckBoxConsoleMenu.setBackground(new java.awt.Color(39, 39, 39));
        jCheckBoxConsoleMenu.setFont(new java.awt.Font("Gill Sans", 0, 14)); // NOI18N
        jCheckBoxConsoleMenu.setForeground(new java.awt.Color(255, 255, 255));
        jCheckBoxConsoleMenu.setText("Console");
        jCheckBoxConsoleMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxConsoleMenuActionPerformed(evt);
            }
        });
        MenuPanel.add(jCheckBoxConsoleMenu);

        jTextSearchFieldMain.setText("Search");
        jTextSearchFieldMain.setToolTipText("Search Key Terms within Analysis Results");
        jTextSearchFieldMain.setPreferredSize(new java.awt.Dimension(110, 28));
        MenuPanel.add(jTextSearchFieldMain);
        MenuPanel.add(jProgressBarSystem);

        mViewPanel.add(MenuPanel, java.awt.BorderLayout.PAGE_START);

        getContentPane().add(mViewPanel, java.awt.BorderLayout.PAGE_START);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Exit the Application
     */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        System.exit(0);
    }//GEN-LAST:event_exitForm

    private void jCheckBoxConsoleMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxConsoleMenuActionPerformed

        consoleFrame.setVisible(jCheckBoxConsoleMenu.isSelected());


    }//GEN-LAST:event_jCheckBoxConsoleMenuActionPerformed

//    class NarrowOptionPane extends JOptionPane {
//
//  NarrowOptionPane() {
//  }
//
//  
//  
//  
//  public int getMaxCharactersPerLineCount() {
//    return 100;
//  }
//}
    List<String> displayedInformation = new ArrayList<String>();


    private void buttonDisplayInformationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDisplayInformationActionPerformed

        String msg = "";

        for (String displayedInformation1 : displayedInformation) {
            msg += (displayedInformation1 + "\n");
        }

        JTextArea textArea = new JTextArea(msg);
        JScrollPane scrollPane = new JScrollPane(textArea);
        textArea.setLineWrap(true);
        textArea.setWrapStyleWord(true);
        scrollPane.setPreferredSize(new Dimension(300, 300));
        JOptionPane.showMessageDialog(null, scrollPane, "job: " + viewController.collection,
                JOptionPane.INFORMATION_MESSAGE);


    }//GEN-LAST:event_buttonDisplayInformationActionPerformed

    private void jSliderTopicChooserStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSliderTopicChooserStateChanged

        // TODO: Li, this is a way to speed up teh Jslider. We don't need to calculate the layout everytime we update.
        JSlider source = (JSlider) evt.getSource();
        if (!source.getValueIsAdjusting()) {
            if (viewController.myRenderingTree != null && treeMapPanel != null) {
                viewController.myRenderingTree.clear();// = new ArrayList<TreeNode>();

                viewController.treemapMiniTemporal.clear();

                //TODO: We want to change the method here. Instead of dynamically add a new node, WHY not we just keep those nodes in memory and hide them?
                TreeNode t = new TreeNode();
                viewController.myRenderingTree.add(t);

                List<TreeNode> compareList = new ArrayList<TreeNode>();

                for (Map.Entry<Integer, TreeNode> entry : viewController.leaves.entrySet()) {
                    //int key = entry.getKey();
                    TreeNode value = entry.getValue();
                    // System.out.println(value.getIndex() + " " + value.getNumberOfEvents() + " " + value.getTopicWeight() + " " + value.getTreeMapTopicWeight());               
                    compareList.add(value);

                }

                treeNodeWeightComparer cper = new treeNodeWeightComparer();
                Collections.sort(compareList, cper);

                for (int i = 0; i < jSliderTopicChooser.getValue(); i++) {
                    viewController.myRenderingTree.add(compareList.get(i));
                    t.addChildNode(compareList.get(i));
                }

//                if (viewController.getTemporalFrame().getTemporalPanelMap().containsKey(1)) {
//                    viewController.getTemporalFrame().getTemporalPanelMap().get(1).clear();

                    for (int i = 0; i < t.getChildren().size(); i++) {
                        try {
//                            viewController.addThemeRiver((TreeNode) t.getChildren().get(i));
                            viewController.addThemeRiverToTreeMap((TreeNode) t.getChildren().get(i));

                        } catch (IOException ex) {
                            Logger.getLogger(DashboardFrame.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
//                }
//TODO: Enable this is we needed.
//                viewController.getPanelImages().clear();
//                for (TemporalViewPanel tvp : viewController.getTemporalFrame().getTemporalPanelMap().get(1)) {
//
//                    BufferedImage bi = viewController.getScreenShot(tvp);
//
////                    File outputfile = new File("saved.png");
////             try {
////                 ImageIO.write(bi, "png", outputfile);
////             } catch (IOException ex) {
////                 Logger.getLogger(DashboardFrame.class.getName()).log(Level.SEVERE, null, ex);
////             }
//                    viewController.getPanelImages().put(tvp.currentNode, bi);
//
//                }

                treeMapPanel.setTree(viewController.myRenderingTree);

                try {
                    treeMapPanel.updateTreeLayout(treeMapPanel.treemapPanelWidth, treeMapPanel.treemapPanelHeight - 20, true);
                } catch (IOException ex) {
                    Logger.getLogger(DashboardFrame.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
            //jSliderTopicChooser.
//            jTextFieldTopicNumberChooser.setText(String.valueOf(jSliderTopicChooser.getValue()));
        }


    }//GEN-LAST:event_jSliderTopicChooserStateChanged

    private void jRadioButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton1ActionPerformed
        // TODO add your handling code here:
//         SystemPreferences.isNormalizationNecessary = !SystemPreferences.isNormalizationNecessary;
//            System.out.println(SystemPreferences.isNormalizationNecessary);

    }//GEN-LAST:event_jRadioButton1ActionPerformed

    private void initializeViews() {
        if (temporalFrame != null) {
            temporalFrame.getMainPanel().buildLabelTimeMap();
        }
        consoleFrame.addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(java.awt.event.WindowEvent windowEvent) {
                jCheckBoxConsoleMenu.setSelected(false);
            }
        });

        this.viewController.initilizeMainHUDDisplay();
    }

    void initializeViews(CSVFile csvf) throws IOException {
        if (temporalFrame != null) {
            temporalFrame.getMainPanel().buildLabelTimeMap();
        }
        consoleFrame.addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(java.awt.event.WindowEvent windowEvent) {
                jCheckBoxConsoleMenu.setSelected(false);
            }
        });

//        vcGeoFrame.addWindowListener(new java.awt.event.WindowAdapter() {
//            @Override
//            public void windowClosing(java.awt.event.WindowEvent windowEvent) {
//                jCheckBoxGeoFrame.setState(false);
//            }
//        });
//        eventViewFrame.addWindowListener(new java.awt.event.WindowAdapter() {
//            @Override
//            public void windowClosing(java.awt.event.WindowEvent windowEvent) {
//                jCheckBoxLabelTopicFrame.setState(false);
//            }
//        });
//        topicFrame.addWindowListener(new java.awt.event.WindowAdapter() {
//            @Override
//            public void windowClosing(java.awt.event.WindowEvent windowEvent) {
//                jCheckBoxTopicGraph.setState(false);
//            }
//        });
//        temporalFrame.addWindowListener(new java.awt.event.WindowAdapter() {
//            @Override
//            public void windowClosing(java.awt.event.WindowEvent windowEvent) {
//                jCheckBoxTemporalFrame.setState(false);
//            }
//        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel MenuPanel;
    private java.awt.Button buttonDisplayInformation;
    private javax.swing.ButtonGroup buttonEditGroup;
    private javax.swing.JCheckBox jCheckBoxConsoleMenu;
    private javax.swing.JComboBox jComboBoxAnalytics;
    private javax.swing.JProgressBar jProgressBarSystem;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JSlider jSliderTopicChooser;
    private javax.swing.JTextField jTextSearchFieldMain;
    private javax.swing.JPanel mViewPanel;
    private javax.swing.ButtonGroup menuEditGroup;
    // End of variables declaration//GEN-END:variables

    public JPanel getmViewPanel() {
        return this.mViewPanel;
    }

    public void run() {

        this.setExtendedState(JFrame.NORMAL);
        this.setPreferredSize(new Dimension(1200, 800));
        this.setSize(1200, 800);

        viewController = new ViewController();
        jCheckBoxConsoleMenu.setSelected(false);

        consoleFrame = new ConsoleFrame();
        consoleFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        consoleFrame.setVisible(false);

        // TODO: Enable this when the backend is ready
//        loginPanel = new LoginPanel(viewController);
//
//        mViewPanel.add(loginPanel);

        documentViewer = new DocumentViewer(viewController);
        documentViewer.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        viewController.addDocumentViewer(documentViewer);

        try {
            this.decorateMainFrame();
        } catch (IOException ex) {
            Logger.getLogger(DashboardFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

        this.initializeMenuPanel();
        /// Load the Analytics Data from the MongoDB
        this.loadComboMenuItems();

        ViewController.mainFrame = this; // Double Binding

    }

    private void initializeMenuPanel() {
        this.jRadioButton1.addItemListener(new ItemListener() {
            public void itemStateChanged(ItemEvent e) {
                SystemPreferences.isNormalizationNecessary = (e.getStateChange() == 1);
                try {
                    ViewController.treemappanel.updateTreeLayout(ViewController.treemappanel.getWidth(), ViewController.treemappanel.getHeight() - 20, false);
                    // TODO: Figure out why the Menu Panel has a height increase
                } catch (IOException ex) {
                    Logger.getLogger(DashboardFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                ViewController.treemappanel.revalidate();
//            System.out.println(SystemPreferences.isNormalizationNecessary);
            }
        });
    }

    private void decorateMainFrame() throws IOException {
        BufferedImage myPicture = ImageIO.read(new File("logo_ta.png"));
        JLabel picLabel = new JLabel(new ImageIcon(myPicture));
        this.MenuPanel.add(picLabel);

    }

    private void loadComboMenuItems() {

        // TODO: This need to be placed in Setting Menu
        viewController.host = "caprica.uncc.edu";//"10.18.203.130";//10.18.202.126"; //"54.209.61.133"; 10.18.203.130
        viewController.b_readFromDB = true;
        viewController.setGlobalReadIndex(0);

        connection = new LDAHTTPClient("http", viewController.host, String.valueOf(viewController.port));
        try {
            connection.login();
        } catch (IOException ex) {
            Logger.getLogger(DashboardFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            for (Object r : (ArrayList) connection.getJobs()) {
                this.jComboBoxAnalytics.addItem((Object) ((HashMap) r).get("_id"));
            }

        } catch (IOException ex) {
            Logger.getLogger(DashboardFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

        jComboBoxAnalytics.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {

                String job = (String) ((JComboBox) e.getSource()).getSelectedItem();
                viewController.collection = job;

                // TODO: Li, please comment on the use of the CSVFile? Export?
                CSVFile csvf = new CSVFile("");
                try {

                    // viewController.setUsageRecord(csvf.getInternalRecord());
                    //viewController.setInternalDocs(csvf.getInternalDocs());
                    // viewController.setTopicSimilarities(csvf.getTopicSimilarities());
                    List<String[]> topics = new ArrayList<String[]>();

                    HashMap<String, String[]> topicsByMongo = new HashMap<String, String[]>();

                    for (Object r : (ArrayList) connection.getJobDocs(job, "topic")) {

                        String Key = (String) ((HashMap) r).get("_id");

                        if (((HashMap) r).get("terms") instanceof BasicDBList) {
                            BasicDBList terms = ((BasicDBList) ((HashMap) r).get("terms"));

                            String[] tmpdest = new String[terms.size() + 2];
                            tmpdest[0] = "Group";
                            tmpdest[1] = Key;
                            for (int i = 0; i < terms.size(); i++) {
                                tmpdest[2 + i] = (String) terms.get(i);

                            }
                            topicsByMongo.put(Key, tmpdest);

                        } else {

                            String terms = (String) ((HashMap) r).get("terms");
                            String[] tmps = terms.split(",");
                            String[] tmpdest = new String[tmps.length + 2];
                            tmpdest[0] = "Group";
                            tmpdest[1] = Key;
                            System.arraycopy(tmps, 0, tmpdest, 2, tmps.length);
                            topicsByMongo.put(Key, tmpdest);
                        }
                    }
                    for (int i = 0; i < topicsByMongo.size(); i++) {
                        String key = "t" + Integer.toString(i);
                        topics.add(topicsByMongo.get(key));
                    }

                    System.out.append("topk loaded");
                    SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

                    for (Object r : (ArrayList) connection.getJob(job)) {
                        HashMap hr = (HashMap) r;
                        List<String> ls = ((List) hr.get("field"));
                        if (ls != null) {
                            viewController.nameFields = new String[ls.size()];
                            for (int i = 0; i < ls.size(); i++) {
                                viewController.nameFields[i] = ls.get(i);
                            }
                        } else {
                            viewController.nameFields = null;
                        }

                        //               String field = String.valueOf(hr.get("field"));
                        //               field = field.replaceAll("\\[","");
                        //               field = field.replaceAll("\\]","");
                        //                       field = field.replaceAll("\"","");
                        //                        field = field.replaceAll(" ","");
                        //               viewController.nameFields = field.split(",");
                        viewController.text_id = ((String) (((HashMap) (hr.get("mongo_input"))).get("text_index")));
                        viewController.database = ((String) (((HashMap) (hr.get("mongo_input"))).get("db")));
                        viewController.table = ((String) (((HashMap) (hr.get("mongo_input"))).get("table")));
                        viewController.id_type = ((String) (((HashMap) (hr.get("mongo_input"))).get("_id_type")));

                        viewController.id_type = ((String) (((HashMap) (hr.get("mongo_input"))).get("_id_type")));
                        viewController.tagLDA = Boolean.parseBoolean(String.valueOf(((HashMap) (hr.get("meta"))).get("tlda")));

                        int num_of_topics = Integer.parseInt(String.valueOf(((HashMap) (hr.get("meta"))).get("num_topics")));
                        displayedInformation.add("num_of_topics: " + String.valueOf(((HashMap) (hr.get("meta"))).get("num_topics")));
                        displayedInformation.add("num_doc: " + String.valueOf(hr.get("num_docs")));

                        long d = Long.parseLong(String.valueOf(hr.get("min_year")));
                        String mindate = format.format(new Date(d));

                        displayedInformation.add("start from: " + mindate);

                        d = Long.parseLong(String.valueOf(hr.get("max_year")));
                        mindate = format.format(new Date(d));

                        displayedInformation.add("to: " + mindate);

                        displayedInformation.add("num of terms: " + String.valueOf(hr.get("num_terms")));
                        displayedInformation.add("tick: " + String.valueOf(hr.get("incremental_days")));

                        displayedInformation.add("database: " + viewController.database);
                        displayedInformation.add("table: " + viewController.table);

                        displayedInformation.add("tag: " + viewController.tagLDA);

                        jSliderTopicChooser.setMajorTickSpacing(5);
                        jSliderTopicChooser.setMinimum(1);
                        jSliderTopicChooser.setMaximum(num_of_topics);

//                        jSliderTopicChooser.setPaintTicks(true);
                        jSliderTopicChooser.setPaintLabels(true);

                    }

                    // Make sure all the backend and frontend are agreeing to this.
                    viewController.setFormat(format);

                    HashMap<String, Float> topicWeightMongo = new HashMap<String, Float>();
                    for (Object r : (ArrayList) connection.getJobDocs(job, "top_wt")) {

                        HashMap hr = (HashMap) r;

                        String key = (String) hr.get("_id");
                        float weights = Float.parseFloat(String.valueOf(hr.get("weight")));
                        if (weights == 0) {
                            weights = 1;
                        }

                        topicWeightMongo.put(key, weights);

                    }

                    for (int i = 0; i < topicWeightMongo.size(); i++) {
                        String key = "two" + (new Integer(i)).toString();

                        viewController.topicWeights.add(topicWeightMongo.get(key));

                    }

                    String TreeString = "";

                    for (Object r : (ArrayList) connection.getJobDocs(job, "flat")) {
                        TreeString = (String) ((HashMap) r).get("tree");
                    }

                    List<HashMap> maplocations = new ArrayList<HashMap>();

                    for (Object r : (ArrayList) connection.getGroupbyDocs("name", viewController.database, viewController.table, "latitude", "longitude")) {
                        maplocations.add((HashMap) r);
                    }

                    viewController.setNewHueColors();

                    Toolkit toolkit = Toolkit.getDefaultToolkit();

                    Dimension scrnsize = toolkit.getScreenSize();

                    String csvfilepath = csvf.getFolderPath();
                    viewController.csvfFolderPath = csvfilepath;
                    viewController.csvfFolderPath = ".\\";

                    HashMap<String, Float> termWeightMongo = new HashMap<String, Float>();
                    List<List<Float>> topkTermWeightMongo = new ArrayList<List<Float>>();

                    HashMap<String, String> topicSimMongo = new HashMap<String, String>();
                    List<List<Float>> topicSim = new ArrayList<List<Float>>();

                    if (viewController.b_readFromDB) {

                        for (Object r : (ArrayList) connection.getJobDocs(job, "topic_terms")) {
                            HashMap hr = (HashMap) r;

                            String key = (String) hr.get("_id");
                            double weights = (Double) hr.get("weight");

                            // float tmpvalue = Float.parseFloat(weights);
                            termWeightMongo.put(key, (float) weights);
                        }

                        for (int i = 0; i < topicsByMongo.size(); i++) {
                            List<Float> tmpL = new ArrayList<Float>();
                            for (int j = 0; j < 50; j++) // hard code
                            {
                                String key = "dist_top" + (new Integer(i)).toString() + "term" + (new Integer(j)).toString();
                                tmpL.add(termWeightMongo.get(key));
                            }
                            topkTermWeightMongo.add(tmpL);

                        }

                        for (Object r : (ArrayList) connection.getJobDocs(job, "top_sim")) {
                            HashMap hr = (HashMap) r;
                            String key = (String) hr.get("_id");
                            String weights = (String) hr.get("weights");
                            // float tmpvalue = Float.parseFloat(weights);
                            topicSimMongo.put(key, weights);

                        }

                        for (int i = 0; i < topicSimMongo.size(); i++) {
                            List<Float> tmpL = new ArrayList<Float>();
                            String key = "topsim" + (new Integer(i)).toString();
                            String weights = topicSimMongo.get(key);
                            String[] tmps = weights.split(",");
                            for (String tmp : tmps) {
                                tmpL.add(Float.parseFloat(tmp));
                            }
                            topicSim.add(tmpL);
                        }
                        csvf.setSimilarityMatrix(topicSim);
                    }

                    //topicFrame = new TopicGraphViewPanel(viewController, csvf.getTermIndex(), csvf.getTermWeights(), topkTermWeightMongo);
                    //viewController.addTopicGraphViewPanel(topicFrame);
                    //viewController.getTopicGraphViewPanel().loadTopic(topics);
                    viewController.allTopics = topics;
                    viewController.extractFrequency();

                    viewController.loadCacheData(job, TreeString, viewController.host);

                    //TODO: Enable temporal view if we need it
//                    temporalFrame = new TemporalViewFrame(viewController, 600, 800, viewController.data, viewController.treeNodes);//scrnsize.width / 2, scrnsize.height);
//                    viewController.addTemporalFrame(temporalFrame);
//                    JFrame jp = new JFrame();
//                    jp.setSize(new Dimension(250, 250));
//                    jp.add(temporalFrame);
//                    jp.setVisible(true);
                    viewController.buildLabelLocations(csvf.getTermIndex(), csvf.getTermWeights(), topkTermWeightMongo);

                    // temporalFrame.loadCacheData(job, TreeString, viewController.host);
                    //temporalFrame.createWorldMap(maplocations);
                    //temporalFrame.setVisible(true);
                    //temporalFrame.setSize(scrnsize.width / 2, scrnsize.height);
                    //temporalFrame.setLocation(0, 0);
                    //System.out.println("topic frame load topics done.");
                    //viewController.getTopicGraphViewPanel().buildTreeWithTreeString(TreeString);
                    //System.out.println("topic frame build tree done..");
                    //topicFrame.setSize(scrnsize.width / 2, scrnsize.height);
                    //topicFrame.setLocation(scrnsize.width / 2, 0);
                    //viewController.getTopicGraphViewPanel().generateLayout();
                    //topicFrame.setVisible(true);
                    //temporalFrame.PreDrawAllLeafs();
                    // TODO: This should be offloaded to backend. Also, We should show events.
                    for (Map.Entry<Integer, TreeNode> entry : viewController.leaves.entrySet()) {
                        TreeNode value = entry.getValue();
                        value.detectEvents(3.0f);
                    }

                    viewController.treeNodes.get(0).calculateTreeMapTopicWeight();
                    viewController.myRenderingTree = new ArrayList<TreeNode>();

                    TreeNode t = new TreeNode();

//                    t.getChildren().clear();
                    viewController.myRenderingTree.add(t);

                    jSliderTopicChooser.setValue(viewController.leaves.size() / 2);

                    List<TreeNode> compareList = new ArrayList<TreeNode>();

                    for (Map.Entry<Integer, TreeNode> entry : viewController.leaves.entrySet()) {
//                        int key = entry.getKey();
                        TreeNode value = entry.getValue();
                        System.out.println(value.getIndex() + " " + value.getNumberOfEvents() + " " + value.getTopicWeight() + " " + value.getTreeMapTopicWeight());

                        compareList.add(value);
//                        if (value.getTreeMapTopicWeight()>=300)
//                        {
//                            viewController.myRenderingTree.add(value);
//                                t.addChildNode(value);
//                        }

                    }

                    treeNodeWeightComparer cper = new treeNodeWeightComparer();
                    Collections.sort(compareList, cper);

                    //initial treemap node number 
                    for (int i = 0; i < jSliderTopicChooser.getValue(); i++) {

                        viewController.myRenderingTree.add(compareList.get(i));
                        t.addChildNode(compareList.get(i));

                    }

                    for (int i = 0; i < t.getChildren().size(); i++) {
                        // viewController.addThemeRiver((TreeNode) t.getChildren().get(i));
                        viewController.addThemeRiverToTreeMap((TreeNode) t.getChildren().get(i));
                    }

                    //temporalFrame.PreDrawAllLeafs();
                    //worldPanel = new WorldMapProcessingPanel(viewController, maplocations, 1200, 1200); // TODO: Reenable if needed
                    
                    JFrame jf = new JFrame();
                    jf.setSize(1200,1200);
                    jf.add(worldPanel);
                    jf.setVisible(true);
                    
//            treemapPanel = new TreeMapProcessingPanel(topicFrame.getTree());         
//            treemapPanel.setVisible(true);
                    // TODO: I commented this out and changed it with a no-parameter initilizer. 
                    // We don't need CSV for this version do we ?
//                    initializeViews(csvf);
                    initializeViews();

//                     for (Object r : (ArrayList) connection.getJobDocs(job, "sent_agg")) {
//                         HashMap a = (HashMap ) r;
//                     }
                    MongoClient mongoClient = null;
                    try {
                        mongoClient = new MongoClient(viewController.host, 27017);
                    } catch (UnknownHostException ex) {
                        System.out.println("DB begin load cache error");
                    }

                    DB db = mongoClient.getDB("lda_results");

                    // TODO: HIGH Change this to Clinet specific log in credential
                    db.authenticate("li", "li_user_2010".toCharArray());
                    DBCollection currentColl = db.getCollection(job);
                    DBCursor cursor = null;

                    DBObject dbo = null;

                    BasicDBObject query = new BasicDBObject();
//
                    query.put("type", "sent_agg");

                    cursor = currentColl.find(query);
                    while (cursor.hasNext()) {
                        dbo = (DBObject) cursor.next();
                        String c = String.valueOf(dbo.get("count"));
                        String p = String.valueOf(dbo.get("pos"));
                        String n = String.valueOf(dbo.get("neg"));
                        TreeNode.SentimentModel sm;

                        sm = new TreeNode.SentimentModel(Integer.parseInt(p), Integer.parseInt(n), Integer.parseInt(c));
                        String ids = String.valueOf(dbo.get("_id"));

                        int index = Integer.parseInt(ids.substring(3));
                        viewController.sen.put(index, sm);

                    }

                    for (TreeNode treenode : viewController.treeNodes) {
                        if (treenode.getChildren().isEmpty()) {
                            treenode.setSentiAgg(viewController.sen.get(treenode.getIndex()));
                        }
                    }

                    mongoClient.close();
                    
                     for (TreeNode treenode : viewController.treeNodes) {
                        if (treenode.getChildren().isEmpty()) {
                            //treenode.
                            
                           //
                        }
                    }
                    
                    
                    

                   // if (viewController.getTemporalFrame().getTemporalPanelMap().containsKey(1)) 
                    {
                      //  viewController.getTemporalFrame().getTemporalPanelMap().get(1).clear();

                        for (int i = 0; i < t.getChildren().size(); i++) {
                            try {
                                //viewController.addThemeRiver((TreeNode) t.getChildren().get(i));
                                viewController.addThemeRiverToTreeMap((TreeNode) t.getChildren().get(i));

                            } catch (IOException ex) {
                                Logger.getLogger(DashboardFrame.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                    }

//                    for (TemporalViewPanel tvp : viewController.getTemporalFrame().getTemporalPanelMap().get(1)) {
//
//                        BufferedImage bi = viewController.getScreenShot(tvp);
//                        viewController.getPanelImages().put(tvp.currentNode, bi);
//
//                    }

                    // TODO: This is hard coded to show the bottom of the view. Need to Change the 80 to dynamically calulated from the height of the menuPanel
                    treeMapPanel = new TopicTreeMapPanel(viewController, viewController.myRenderingTree, mViewPanel.getWidth(), mViewPanel.getHeight() - 80);//, );
                    ViewController.treemappanel = treeMapPanel;// Double Binding this to static treemap panel
                    mViewPanel.add(treeMapPanel);

//                     PrefuseWordleLayout ppp;
//                    ppp = new PrefuseWordleLayout(viewController, (TreeNode) viewController.myRenderingTree.get(2));
//            
//            JFrame jf = new JFrame();
//            jf.setSize(1000, 1000);
////            jf.add(ppp);
//            
//            jf.setVisible(true);
//            PrefuseLabelTopicGraphPanel labelTopicGraphPanel = null;
//            if (viewController.tagLDA) {
//                labelTopicGraphPanel = new PrefuseLabelTopicGraphPanel(viewController.csvfFolderPath, viewController, csvf.getSimilarityMatrix());
//            }
//
//            //        Border orangeLine = BorderFactory.createLineBorder(Color.orange);
//            //        mButtonPanel.setBorder(orangeLine);
//            rightTopScrollPane = new JScrollPane(temporalFrame, ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED, ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);
//            rightTopScrollPane.setViewportView(temporalFrame);
////
//            JPanel tempp = new JPanel();
//            rightBottomScrollPane = new JScrollPane(tempp, ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED, ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);
//            rightBottomScrollPane.setViewportView(tempp);
////
//            leftTopScrollPane = new JScrollPane(treeMapPanel, ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED, ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);
//            leftTopScrollPane.setViewportView(treeMapPanel);
////
//            leftBottomScrollPane = new JScrollPane(worldPanel/*worldPanel*/, ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED, ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);
//            leftBottomScrollPane.setViewportView(worldPanel/*worldPanel*/);
////
//            leftSplit = new JSplitPane(JSplitPane.VERTICAL_SPLIT,leftTopScrollPane, leftBottomScrollPane);
//            leftSplit.setOneTouchExpandable(true);
//            leftSplit.setDividerLocation(0.8d);
//            leftSplit.setResizeWeight(0.8d);
////
//            rightSplit = new JSplitPane(JSplitPane.VERTICAL_SPLIT,rightTopScrollPane, rightBottomScrollPane);
//            rightSplit.setOneTouchExpandable(true);
//            rightSplit.setDividerLocation(0.8d);
//            leftSplit.setResizeWeight(0.8d);
//                    mainSplit = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT, treeMapPanel, worldPanel);//leftSplit, rightSplit);//
//
//                    mainSplit.setOneTouchExpandable(true);
//                    mainSplit.setDividerLocation(0.5d);
//                    mainSplit.setResizeWeight(0.5d);
//
//                    mainSplit.setContinuousLayout(true);
//
//                    mainSplit.addPropertyChangeListener(JSplitPane.DIVIDER_LOCATION_PROPERTY, new PropertyChangeListener() {
//                        @Override
//                        public void propertyChange(PropertyChangeEvent pce) {
//                            // do here
//
//                            if (treeMapPanel != null) {
//
//                                try {
//                                    //treeMapPanel.setPreferredSize( new Dimension(e.getComponent().getSize().width, e.getComponent().getSize().height));
//                                    treeMapPanel.updateTreeLayout(mainSplit.getLeftComponent().getWidth(), mainSplit.getLeftComponent().getHeight() - MenuPanel.getHeight(), false);
//                                } catch (IOException ex) {
//                                    Logger.getLogger(DashboardFrame.class.getName()).log(Level.SEVERE, null, ex);
//                                }
//                                treeMapPanel.invalidate();
//                                treeMapPanel.getRootPane().revalidate();
//                            }
//                        }
//
////                        public void propertyChange(PropertyChangeEvent evt) {
////                            throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
////                        }
//                    });
////
//            //Provide minimum sizes for the two components in the split pane
//            Dimension minimumSize = new Dimension(200, 100);
//            leftTopScrollPane.setMinimumSize(minimumSize);
//            leftBottomScrollPane.setMinimumSize(minimumSize);
//
//            rightTopScrollPane.setMinimumSize(minimumSize);
//            rightBottomScrollPane.setMinimumSize(minimumSize);
//
//            Dimension maximumSize = new Dimension(1000, 1000);
//            leftBottomScrollPane.setMaximumSize(maximumSize);
//            rightTopScrollPane.setMaximumSize(maximumSize);
//            rightBottomScrollPane.setMaximumSize(maximumSize);
//            
//                    Border blackline = BorderFactory.createLineBorder(Color.black);
//                    mViewPanel.setBorder(blackline);
//                    mViewPanel.add(mainSplit);
                    //mViewPanel.add(treeMapPanel);
                } catch (IOException ex) {
                    Logger.getLogger(DashboardFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                try {
                    connection.close();

                  
                } catch (IOException ex) {
                    Logger.getLogger(DashboardFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    public class treeNodeWeightComparer implements Comparator<TreeNode> {
        //@Override
//  public int compare(labelText x, labelText y) {
//    // TODO: Handle null x or y values
//    int startComparison = compare(x.probablity, y.probablity);
//    return startComparison != 0 ? startComparison
//                                : compare(x.probablity, y.probablity);
//  }

        // I don't know why this isn't in Long...
        private int compare(double a, double b) {
            return a > b ? -1
                    : a < b ? 1
                    : 0;
        }

        public int compare(TreeNode o1, TreeNode o2) {
            int startComparison = compare(o1.getTreeMapTopicWeight(), o2.getTreeMapTopicWeight());

            return startComparison != 0 ? startComparison
                    : compare(o1.getTreeMapTopicWeight(), o2.getTreeMapTopicWeight());

            //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        }

    }

    public DashboardFrame() {
        initComponents();

        this.setTitle("Apollo Analytics");
        thread = new Thread(this);

        this.addComponentListener(new ComponentListener() {

            public void componentResized(ComponentEvent e) {

                if (mViewPanel != null) {

                    mViewPanel.setPreferredSize(new Dimension(e.getComponent().getSize().width, e.getComponent().getSize().height));
                }

//                if (mainSplit != null) {
//
//                    mainSplit.setPreferredSize(new Dimension(((JFrame) e.getComponent()).getContentPane().getWidth(), ((JFrame) e.getComponent()).getContentPane().getHeight()));
//
//                    try {
//                        treeMapPanel.updateTreeLayout(mainSplit.getLeftComponent().getWidth(), mainSplit.getLeftComponent().getHeight() - MenuPanel.getHeight(), false);
//                    } catch (IOException ex) {
//                        Logger.getLogger(DashboardFrame.class.getName()).log(Level.SEVERE, null, ex);
//                    }
//                    treeMapPanel.invalidate();
//                    treeMapPanel.getRootPane().revalidate();
//                }
                revalidate();

            }

            public void componentMoved(ComponentEvent e) {

                //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }

            public void componentShown(ComponentEvent e) {
                //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }

            public void componentHidden(ComponentEvent e) {
                //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }
        });

    }

    public void start() {
        thread.start();
    }
}
